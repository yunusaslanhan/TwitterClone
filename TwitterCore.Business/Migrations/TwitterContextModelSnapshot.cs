// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TwitterCore.Business.Context;

namespace TwitterCore.Business.Migrations
{
    [DbContext(typeof(TwitterContext))]
    partial class TwitterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TwitterCore.Domain.Entities.Follow", b =>
                {
                    b.Property<int>("FollowerId");

                    b.Property<int>("FollowingId");

                    b.Property<int>("FollowId");

                    b.HasKey("FollowerId", "FollowingId");

                    b.HasAlternateKey("FollowerId", "FollowId", "FollowingId");

                    b.HasIndex("FollowingId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromId");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(140);

                    b.Property<int>("ToId");

                    b.HasKey("MessageId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Retweet", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TweetId");

                    b.Property<int>("RetweetId");

                    b.HasKey("UserId", "TweetId");

                    b.HasAlternateKey("RetweetId");

                    b.HasIndex("TweetId");

                    b.ToTable("Retweets");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Tweet", b =>
                {
                    b.Property<int>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentCount");

                    b.Property<int>("LikeCount");

                    b.Property<int>("RetweetCount");

                    b.Property<string>("TweetText")
                        .IsRequired()
                        .HasMaxLength(140);

                    b.Property<int>("UserId");

                    b.HasKey("TweetId");

                    b.HasIndex("UserId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.TweetComment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TweetId");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(140);

                    b.Property<int>("TweetCommentId");

                    b.HasKey("UserId", "TweetId");

                    b.HasAlternateKey("TweetCommentId");

                    b.HasIndex("TweetId");

                    b.ToTable("TweetComments");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.TweetLike", b =>
                {
                    b.Property<int>("TweetId");

                    b.Property<int>("UserId");

                    b.Property<int>("TweetLikeId");

                    b.HasKey("TweetId", "UserId");

                    b.HasAlternateKey("TweetLikeId");

                    b.HasIndex("UserId");

                    b.ToTable("TweetLikes");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreateDate")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Photo")
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Follow", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.User", "followerUser")
                        .WithMany("Follower")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TwitterCore.Domain.Entities.User", "followingUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Message", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.User", "FromUser")
                        .WithMany("FromMessage")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TwitterCore.Domain.Entities.User", "ToUser")
                        .WithMany("ToMessage")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Retweet", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.Tweet", "tweetId")
                        .WithMany("Retweet")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TwitterCore.Domain.Entities.User", "userId")
                        .WithMany("Retweet")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.Tweet", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.User", "user")
                        .WithMany("Tweets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.TweetComment", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.Tweet", "tweetId")
                        .WithMany("TweetComment")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TwitterCore.Domain.Entities.User", "userId")
                        .WithMany("TweetComment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TwitterCore.Domain.Entities.TweetLike", b =>
                {
                    b.HasOne("TwitterCore.Domain.Entities.Tweet", "tweetId")
                        .WithMany("TweetLike")
                        .HasForeignKey("TweetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TwitterCore.Domain.Entities.User", "userId")
                        .WithMany("TweetLike")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
